<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
	http://www.springframework.org/schema/context  
	http://www.springframework.org/schema/context/spring-context-3.1.xsd  
	http://www.springframework.org/schema/mvc  
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.cn.wy.controller" />
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<!--
		如何你的DispatcherServlet拦截 *.do这样的URL， 就不存在访问不到静态资源的问题。
		如果你的DispatcherServlet拦截“/”，拦截了所有的请求， 同时对*.js,*.jpg的访问也就被拦截了。
		这里可以解决访问静态资源被拦截的问题.
	-->
	 <mvc:default-servlet-handler />
	<mvc:resources mapping="/resources/**" location="/resources/" />
	
		<!-- 要使用spring mvc中的@Controller注解， 
		就必须要配置<mvc:annotation-driven />，
		否则DispatcherServlet无法找到控制器并把请求分发到控制器。 -->
	
	<mvc:annotation-driven />
	
    <mvc:interceptors>  
   		<!--  使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求   -->
	    <mvc:interceptor>  
	        <mvc:mapping path="/**"/>  
	        <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的   -->
	        <mvc:exclude-mapping path="/toLogin.do"/>
	        <mvc:exclude-mapping path="/login.do"/>
	        <bean class="com.cn.wy.interceptor.LoginInterceptor"/>  
	    </mvc:interceptor>  
	    <mvc:interceptor>  
	        <mvc:mapping path="/**"/>  
	        <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的   -->
	        <mvc:exclude-mapping path="/toLogin.do"/>
	        <mvc:exclude-mapping path="/login.do"/>
	        <mvc:exclude-mapping path="/toIndex.do"/>
	        <mvc:exclude-mapping path="/loginOut.do"/>
	        <mvc:exclude-mapping path="/updatePwd.do"/>
	        <!-- <mvc:exclude-mapping path="/toHome.do"/> -->
	        <bean class="com.cn.wy.interceptor.PowerInterceptor"/>  
	    </mvc:interceptor>  
	</mvc:interceptors>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean> 

</beans>